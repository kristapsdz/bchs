<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>BCHS//sqlbox: database access library</title>
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,400italic,500" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
		<link rel="stylesheet" href="highlight.css" />
		<link rel="stylesheet" href="ksql.css" />
		<link rel="shortcut icon" type="image/png" href="/favicon-196x196.png" />
		<link rel="shortcut icon" sizes="196x196" href="/favicon-196x196.png" />
		<link rel="apple-touch-icon" href="/favicon-196x196.png" />
		<meta property="og:title" content="BCHS and sqlbox: a secure database access library" />
		<meta property="og:image" content="https://learnbchs.org/logo-blue.png" />
		<meta property="og:url" content="https://learnbchs.org/sqlbox.html" />
		<meta property="og:type" content="website" />
		<meta property="og:description" content="Secure database access library." />
		<meta name="description" content="Secure database library." />
	</head>
	<body>
		<section itemscope="itemscope" itemtype="http://schema.org/WebPage">
			<header>
				<img itemprop="image" src="logo-blue.png" alt="BCHS Logo" />
				<h1>
					<a href="index.html" itemprop="name">BCHS</a>
				</h1>
				<nav>
					<a href="tools.html"><span>tools</span></a>
					<a href="easy.html"><span>example</span></a>
					<a href="https://github.com/kristapsdz/bchs"><i class="fa fa-github"></i></a>
				</nav>
			</header>
			<article>
				<p id="tldr">
					While <a href="ksql.html">ksql</a> has been great to work with, it's too slow for my current needs.
					This article introduces <a href="https://kristaps.bsd.lv/sqlbox">sqlbox</a>, which has a different API
					geared for much higher performance while offering the same (if not slightly better) security.
					This document is based on <span class="nm">sqlbox</span> <var>v0.1.5</var>.
				</p>
				<h2>
					background
				</h2>
				<p>
					<a href="ksql.html">ksql</a> was started as a way to allow <a href="https://sqlite.org">sqlite3</a>
					database access within a file-system constrained application process
					(typically as enacted with <a href="https://man.openbsd.org/pledge.2">pledge</a>).
					Since <span class="nm">sqlite3</span> is both in-process and on the file-system, this necessitated a
					separate process with file-system access.
					Parent and child would communicate synchronously over sockets.
				</p>
				<figure>
					<img src="sqlbox-fig1.svg" />
				</figure>
				<p>
					The library has served this purpose admirably.
					But as my application needs grew into performance alongside security, I found it difficult for <span
						class="nm">ksql</span> to keep up.
					Several issues arose, which would be difficult to address without drastic API or backend changes:
				</p>
				<ul>
					<li>
						<strong>Complexity</strong>:
						has both an in-process and split-process mode, the former being unsafe and adding a layer of
						complexity to everything.
						See <a href="https://kristaps.bsd.lv/ksql/ksql_alloc.3.html">ksql_alloc</a>
						versus <a href="https://kristaps.bsd.lv/ksql/ksql_alloc_child.3.html">ksql_alloc_child</a>.
					</li>
					<li>
						<strong>Integrity</strong>: lets the application optionally handle database failure, which makes
						audits of database integrity (database process should close database in a safe state) difficult.
						This is compounded in the non-split-process mode.
					</li>
					<li>
						<strong>Performance</strong>: <span class="nm">sqlite3</span>-modelled API functions are
						synchronous in that the application requests then receives a response from the database process,
						so each each operation requires a round-trip.
					</li>
				</ul>
				<p>
					The performance issues may be visualised by the penalty of creating, opening, operating upon, then
					closing an in-memory database.
					(These graphs also show that the process of allocating the database is quite expensive!)
				</p>
				<figure class="pair">
					<img src="sqlbox-fig2.png" alt="graph of full database cycle" />
					<img src="sqlbox-fig3.png" alt="graph of full database cycle" />
				</figure>
				<p>
					The real cost may be seen in preparing and executing statements, with each step (har, har) along the way
					being communicated synchronously over a socket communication.
				</p>
				<figure class="pair">
					<img src="sqlbox-fig4.png" alt="graph of result gathering" />
					<img src="sqlbox-fig5.png" alt="graph of result gathering" />
				</figure>
				<p>
					There are similar penalties in acquiring resulting rows, but that I'll discuss later.
				</p>
				<p>
					To fix some of the issues would require completely overhauling the implementation, such as split-process
					mode.
					Others, like performance, would require a significant API change.
					Since <span class="nm">ksql</span> has shown itself to be a very stable piece of software, it makes more
					sense to simply start again with a new API in a new library, inheriting if not code, then at least
					backend processes from the origin.
				</p>
				<h2>
					design considerations
				</h2>
				<p>
					In writing <span class="nm">sqlbox</span>, I focussed on several points:
				</p>
				<ul>
					<li>
						<strong>Wait-free operation</strong>: by combining close-on-fail with implicit addressing
						(addressing, for example, the last open statement instead of needing to open the statement and
						wait for a prior identifier), most operations are wait-free.
					</li>
					<li>
						<strong>Caching results</strong>: have the database process optionally transfer a cache of
						result rows instead of just a single one, filling the cache between requests.  This reduces the
						number of inter-process communication.
					</li>
					<li>
						<strong>API compacting</strong>: instead of needing to invoke communication for each (for
						example) bind or resutl operation, reconstitute the API to have these occur all at once.
						This prevents significant superfluous communication.
					</li>
				</ul>
				<p>
					Wait-free operation stipulates that the exchange of data between the application and database process,
					where the former waits for a response from the latter, is limited to only necessary steps.
					This allows both processes to perform work in between requests, greatly increasing performance.
				</p>
				<figure>
					<img src="sqlbox-fig6.svg" />
				</figure>
				<p>
					Caching responses linearly increases performances by having the database process pre-step as many
					results as possible while waiting.
					After returning a cached payload, the application simply steps through result rows in memory and need
					not contact the database application.
				</p>
				<figure>
					<img src="sqlbox-fig7.svg" />
				</figure>
				<p>
					For optimum performance, the database process collects results <emph>after</emph> responding to a prior
					step request that returns results.
					This takes place during the waiting period while the application is operating on existing data.
				</p>
				<p>
					API redesign compresses the binding operation into statement preparation or execution.
					This means that instead of invoking one round-trip operation per column, there's only one per statement.
				</p>
				<figure>
					<img src="sqlbox-fig8.svg" />
				</figure>
				<h2>
					implementation
				</h2>
				<p>
					Like <span class="nm">ksql</span>, <span class="nm">sqlbox</span> uses native operating system security
					features to constrain the database process.
					The application is responsible for doing so itself.
					On <a href="https://www.openbsd.org">OpenBSD</a>, the platform of choice, this is enacted by
					<a href="https://man.openbsd.org/pledge.2">pledge</a>.
					There are options for similar security levels on <a href="https://www.freebsd.org">FreeBSD</a> using
					Capsicum and overriding how <span class="nm">sqlite3</span> opens files, but this is not currently on
					the roadmap.
				</p>
				<p>
					Unlike <span class="nm">ksql</span>, <span class="nm">sqlbox</span> has a robust set of regression tests
					to verify that the behaviour stipulated in its manpages is consistent with the implementation.
					To date, there are over <var>150</var> tests.
					This framework ensures that changes to the implementation do not affect expected behaviour.
					It also ensures that border conditions are properly handled.
				</p>
				<pre>% make regress
test-alloc-bad-defrole... <span style="color: green;">ok</span>
test-alloc-bad-filt-stmt... <span style="color: green;">ok</span>
test-alloc-bad-role... <span style="color: green;">ok</span>
test-alloc-bad-src... <span style="color: green;">ok</span>
<span style="color: lightgray;">[...]</span>
% make valgrind # "regress" but under valgrind</pre>
				<p>
					In the code itself, another significant difference is that (with very few exceptions) requests and
					responses use fixed-sized minimum packet sizes for communication.
					At the moment, this is fixed at <strong>1024 B</strong>.
					This means that both processes read at least 1K for each communication.
					Why?
					It allows up to 1K of request data (parameters, response rows, etc.) to be written into each packet with
					a single <code>read()</code> instead of requiring one for size, one for data.
					Transmissions of greater than 1K read only the remainder.
					The choice of 1K is simply to be less than the default socket buffer size.
					(It can be tuned at compile time.)
				</p>
				<h2>
					results
				</h2>
				<p>
					Even at this early stage of development, the results are quite impressive.
					The following chart the overhead of <span class="nm">ksql</span> versus <span class="nm">sqlbox</span>
					over the native <span class="nm">sqlite3</span>.
				</p>
				<figure class="pair">
					<img src="sqlbox-fig9.png" alt="graph of full database cycle" />
					<img src="sqlbox-fig10.png" alt="graph of prep-bind-step cycle" />
				</figure>
				<p>
					The benefit of the first graph (<q>full-cycle</q> operation) is not so clear considering that the
					underlying expense of creating the database outweighs the communication costs.
					The second graph (<q>prepare-bind-step</q> cycle) is more visible due to the API reflow and wait-free
					operation.
				</p>
				<p>
					The following shows the benefit of caching step statements.
					The first graph does not cache; the second does.
					Both use the same code for generating the <span class="nm">ksql</span> case.
					We see, in the first, simply the cost of two synchronous operations transferring bytes.
					<span class="nm">sqlbox</span> is approximately twice as fast because it this in one step.
				</p>
				<figure class="pair">
					<img src="sqlbox-fig11.png" alt="without multi-select" />
					<img src="sqlbox-fig12.png" alt="with multi-select" />
				</figure>
				<p>
					It's clear that stuffing result rows has a noticeable benefit in terms of performance.
				</p>
				<h2>
					future work
				</h2>
				<p>
					With a cleaner API and back-end, it's much easier to add further improvements.
					First, the implementation should compute and exchange the minimum buffer size at startup.
					This is also necessary for actual socket communication where the buffer sizes will not be symmetric.
				</p>
				<p>
					Second, the multi-step result caching can be considerably improved.
					For now it just uses a fixed-sized buffer for gathering results (10K, specifically).
					This should be determined at run-time.
				</p>
			</article>
			<footer>
				<div>
					<a href="https://creativecommons.org/licenses/by/4.0/"><i class="fa fa-creative-commons"></i></a> 
					<a rel="author" href="https://kristaps.bsd.lv">Kristaps Dzonsons</a>
				</div>
			</footer>
		</section>
	</body>
</html>

