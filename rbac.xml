<!DOCTYPE html>
<html lang="en" prefix="og: http://ogp.me/ns#">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>BCHS//openradtool: introducing RBAC</title>
		<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js?lang=c&amp;lang=sql"></script>
		<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Alegreya+Sans:400,400italic,500,700" />
		<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" />
		<link rel="stylesheet" href="highlight.css" />
		<link rel="stylesheet" href="kwebapp.css" />
		<link rel="shortcut icon" type="image/png" href="/favicon-196x196.png" />
		<link rel="shortcut icon" sizes="196x196" href="/favicon-196x196.png" />
		<link rel="apple-touch-icon" href="/favicon-196x196.png" />
		<meta property="og:title" content="BCHS and openradtool: introducing RBAC" />
		<meta property="og:image" content="https://learnbchs.org/logo-blue.png" />
		<meta property="og:url" content="https://learnbchs.org/rbac.html" />
		<meta property="og:type" content="website" />
		<meta property="og:description" content="Role-based access control (RBAC) in your openradtool application." />
		<meta name="description" content="Role-based access control (RBAC) in your openradtool application." />
	</head>
	<body>
		<section itemscope="itemscope" itemtype="http://schema.org/WebPage">
			<nav class="subnav">
				openradtool series:
				<a href="kwebapp.html">introduction</a>, 
				<a href="rbac.html">RBAC</a>,
				<a href="auditing.html">role audits</a>,
				<a href="translate.html">translation</a>,
				<a href="typescript.html">TypeScript</a>
			</nav>
			<header>
				<img itemprop="image" src="logo-blue.png" alt="BCHS Logo" />
				<h1>
					<a href="index.html" itemprop="name">BCHS</a>
				</h1>
				<nav>
					<a href="tools.html"><span>tools</span></a>
					<a href="easy.html"><span>example</span></a>
					<a href="https://github.com/kristapsdz/bchs"><i class="fa fa-github"></i></a>
				</nav>
			</header>
			<article>
				<header>
					<p class="tldr">
						<strong>tl;dr</strong> 
						<a href="https://kristaps.bsd.lv/openradtool">openradtool</a> (as of version 0.3.0) has gained <a
							href="https://en.wikipedia.org/wiki/Role-based_access_control">role-based access
							control</a> (RBAC) facilities allowing the generated <q>data layer</q> to be
						aware of user roles.
						This allows developers to sandbox database operations to a particular user role.
					</p>
					<h2 class="smaller">
						<a href="index.html">BCHS</a>: API provisioning
					</h2>
				</header>
				<section class="intro">
					<p>
						When deploying our <a href="index.html">BCHS</a> web applications, we need to evaluate the
						<strong>full stack</strong> for its security.
					</p>
					<ul>
						<li>
							Is the physical location secure? (Attack dogs, guns, clowns.)
						</li>
						<li>
							Are discs encrypted?  (<a
								href="https://www.openbsd.org/faq/faq14.html#softraidFDE">Software FDE</a>.)
						</li>
						<li>
							Are our file-systems well-partitioned with regards to users?  (<a
								href="https://man.openbsd.org/hier">hier(7)</a>, etc.)
						</li>
						<li>
							Are our ingress systems secure?  (<a href="https://man.openbsd.org/sshd">sshd(8)</a>, <a
								href="https://man.openbsd.org/httpd">httpd(8)</a>, etc.)
						</li>
						<li>
							Is our application properly privilege separated?  (<a
								href="https://man.openbsd.org/pledge">pledge(2)</a>, <a
								href="https://man.openbsd.org/chroot.2">chroot(2)</a>, etc.)
						</li>
					</ul>
					<p>
						All of these account for an application's external environment.
						But what about the environment internal to the application's run-time&#8212;say, making sure
						that a request servicing a user doesn't try to modify administrative tables?
					</p>
					<p>
						Enter <a href="https://kristaps.bsd.lv/openradtool">openradtool</a>'s new API provisioning facility.
					</p>
					<h3>
						what is openradtool
					</h3>
					<p>
						<a href="https://kristaps.bsd.lv/openradtool">openradtool</a> is a system that uses a configuration file
						to define the data model of your <a
							href="index.html">BCHS</a> application: the data itself (<a
							href="https://sqlite.org">sqlite3</a>), insertion routines, deletion, all sorts of
						querying, etc.
						It uses <a href="https://kristaps.bsd.lv/ksql">ksql</a> to manipulate the underlying database,
						and can optionally pull in <a href="https://kristaps.bsd.lv/kcgi">kcgi</a> to validate HTTP
						fields for safe entry into the database.
						A <a href="kwebapp.html">previous article</a> covers the system in detail.
					</p>
					<figure>
						<img src="rbac-fig4.svg" alt="" />
					</figure>
					<p>
						Let's start with a simple example that defines part of a web application: a login session
						(usually associated with a session cookie) and a user record.
					</p>
					<pre class="prettyprint">struct user {
  field email email unique;
  field hash password;
  search email, hash: name creds comment 
    "Lookup by credentials.";
  field id int rowid;
};

struct session {
  field user struct userid;
  field userid:user.id int comment 
    "User associated with session.";
  field id int rowid;
  insert;
  search id: name id comment 
    "Lookup by unique identifier.";
  delete id;
};</pre>
					<p>
						With this snippet, we've defined <code class="prettyprint">struct session</code> and <code class="prettyprint">struct user</code>.
						These are implemented in SQL as tables, with each <code class="prettyprint">field</code> being a column.
						For example, you can see how the <code class="prettyprint">session</code> object (and its
						documentation) carries into generated SQL:
					</p>
					<pre class="prettyprint lang-sql">CREATE TABLE session (
  -- User associated with session.
  userid INTEGER NOT NULL,
  id INTEGER PRIMARY KEY,
  FOREIGN KEY(userid) REFERENCES user(id)
);</pre>
					<p>
						In the C API, the <code class="prettyprint">struct</code> objects are <code
							class="prettyprint">struct</code> C entities, with each <code class="prettyprint">field</code> being a structure member.
						All fields are documented, if provided.
						Similar to the SQL code, the comments associated with fields and structures are carried into the output.
					</p>
					<pre class="prettyprint lang-c">struct  session {
  struct user user;
  /* User associated with session. */
  int64_t  userid;
  int64_t  id;
};</pre>
					<p>
						The query (<code class="prettyprint">search</code>), insertion (<code
							class="prettyprint">insert</code>), and deletion (<code
							class="prettyprint">delete</code>) functions are also generated along with their
						documentation.
						For example, the <code class="prettyprint">search email, hash: name creds</code> snippet generates the following:
					</p>
					<pre class="prettyprint lang-c">/*
 * Lookup by credentials.
 * Uses the given fields in struct user:
 * 	v1: email
 * 	v2: hash (pre-hashed password)
 * Returns a pointer or NULL on fail.
 * Free the pointer with db_user_free().
 */
struct user *db_user_get_creds
  (struct ksql *db, const char *v1, const char *v2);</pre>
					<p>
						See the generated C <a href="rbac-ex1.c.html">source</a> and <a
							href="rbac-ex1.h.html">header</a> file for yourself: it's all there.
					</p>
					<h3>
						what can go wrong
					</h3>
					<p>
						First, exposure to data.
					</p>
					<p>
						The <code class="prettyprint">struct ksql</code> returned by the <a
							href="rbac-ex1.h.html">generated functions</a> allows access to the full database by
						callers.  
						This is by design: <a href="https://kristaps.bsd.lv/openradtool">openradtool</a> doesn't directly
						support the full breadth of SQL functions you might want to use.
						By exporting the database connection itself, callers can provide their own complex SQL operations directly to
						<a href="https://kristaps.bsd.lv/ksql/ksql_stmt_alloc.3.html">ksql_stmt_alloc(3)</a>.
					</p>
					<p>
						Mistakes happen.
					</p>
					<p>
						In a recent web application project, I made the mistake of inserting an administrator table row
						instead of a user table row simply by typo-ing a conditional.
						If left unchecked, it would have allowed users to create administrators&#8212;those with
						significant control over other users and basically all parts of the system!
						It would have been a disaster.
					</p>
					<p>
						How could I have caught this sooner?
					</p>
					<h3>
						enter rbac
					</h3>
					<p>
						With a sandbox like <a href="https://man.openbsd.org/pledge.2">pledge(2)</a>, I can stipulate
						which operations of an application are allowed in which circumstances.
						For example, if I provide the common <b>-o</b> flag to an application, I might want to provide
						the <code class="prettyprint">wpath cpath</code> pledges; otherwise, I don't allow any file system access.
						This allows me to say, up-front, what I can do and what I can't.
					</p>
					<p>
						If I disallow an operation and subsequently try to use it&#8212;like running without <b>-o</b>
						and accessing the file-system&#8212;the application crashes.  
						Game over.
					</p>
					<p>
						As it was previously in <a href="https://kristaps.bsd.lv/openradtool">openradtool</a>, there were no
						restrictions on function invocation&#8212;no sandbox.
						In other words, the landscape was <q>flat</q>.
						Let's consider an example with a <code class="prettyprint">user</code> and <code
							class="prettyprint">admin</code>, representing normal users and administrators, respectively.
						If the former stipulates an <code class="prettyprint">insert</code> operation and the latter,
						<code class="prettyprint">list</code> and <code class="prettyprint">insert</code>, we'll have:
					</p>
					<figure>
						<img src="rbac-fig1.svg" alt="" />
					</figure>
					<p>
						However, since the web application would be invoked by an operator in a given role (e.g., a user from
						his or her web browser, an administrator from a local application or also via the web), I can
						in theory identify the source and provision accordingly.
						This way, I can identify which operations were permissible from which user roles.
					</p>
					<p>
						In the above example, let's say that an administrator should be able to list and add new
						administrators, but not touch users.
						Users, on the other hand, can only add other users.
					</p>
					<figure>
						<img src="rbac-fig2.svg" />
					</figure>
					<p>
						The new <a href="https://kristaps.bsd.lv/openradtool">openradtool</a> RBAC feature accommodates for this by
						identifying roles; and then for each role, establishing which operations are permitted by that role.
					</p>
					<p>
						If a user role tries to perform a disallowed task&#8212;bam.
						Application calls <a href="https://man.openbsd.org/abort.3">abort(3)</a>.
						The syntax to accommodate for this is super easy.
						Using our above example (abridged for brevity)&#8230;
					</p>
					<pre class="prettyprint">roles {
  role user;
  role admin;
};

struct user {
  field email email unique;
  field hash password;
  search email, hash: name creds comment 
    "Lookup by credentials.";
  field id int rowid;
  roles user { 
    search creds;
  };
};

struct session {
  field user struct userid;
  field userid:user.id int comment 
    "User associated with session.";
  field id int rowid;
  insert;
  search id: name id comment 
    "Lookup by unique identifier.";
  delete id;
  roles all {
    all;
  };
  roles default {
    search id;
  };
};</pre>
					<p>
						First, note the <code class="prettyprint">roles { ... }</code> top-level block.
						This defines the actual roles themselves.
						Roles are nested: a role within a role has access to all of the parent's roles, but the parent does
						not have access to the child's.
						One common usage is to have administrative sub-roles, for example, <code class="prettyprint">role admin
							{ role useradmin; role sessadmin; }</code> might have <code class="prettyprint">useradmin</code>
						manage users, while other roles would be responsible for other tasks, and all <code
							class="prettyprint">admin</code> sub-roles would have access to generic access on the admin
						table.
					</p>
					<p>
						There are three reserved roles: <code class="prettyprint">default</code>, <code
							class="prettyprint">all</code>, and <code class="prettyprint">none</code>.
						The first is the initial role before a role has been manually set; the second is the top-level for all
						user-defined roles, and the third cannot do anything at all.
					</p>
					<p>
						You can read all about the RBAC facilities in <a href="https://kristaps.bsd.lv/openradtool/ort.5.html">ort(5)</a>.
					</p>
					<h3>
						the api
					</h3>
					<p>
						Little needs to change in your system's API.
						Foremost, however, stipulating a top-level <code class="prettyprint">roles { ... };</code> will
						change the value returned by <code class="prettyprint lang-c">db_open(const char *file)</code> from <code
							class="prettyprint lang-c">struct ksql</code> to <code class="prettyprint lang-c">struct
							kwbp</code>, which is an opaque pointer.
						This pointer contains the open database connection and our current role.
					</p>
					<p>
						Next is <code class="prettyprint lang-c">db_role(struct kwbp *ctx, enum kwbp_role r)</code>.
						This function allows us to change our roles.
						We can transition from the <code class="prettyprint">ROLE_default</code> role into any role, or from any
						role into a descendent role.
						We can never change to an ancestor or traverse the role graph.
						Changing into the same role is a no-op.
					</p>
					<p>
						You can always drop into <code class="prettyprint">ROLE_none</code>, which is guaranteed to be a
						leaf role.  This role can never have operations assigned to it: any database access will fail.
					</p>
					<figure>
						<img src="rbac-fig3.svg" alt="" />
					</figure>
					<p>
						That's it!
						For most of my applications, the change in returned structure is the most significant part.
						The rest is fairly mechanical.
						For the above example, you can see the full <a href="rbac-ex2.c.html">C source code</a> and <a
							href="rbac-ex2.h.html">C header file</a> for yourself.
					</p>
					<h3>
						what's next
					</h3>
					<p>
						<a href="https://kristaps.bsd.lv/openradtool">openradtool</a> is designed to be a small system, so there
						isn't much more to add that wouldn't needlessly complicate things.
						However&#8230;
					</p>
					<p>
						One likely candidate is to allow the <code class="prettyprint">field</code> statement for
						structures be aware of roles.
						This is handy when certain roles want to query only some data.
						For example, consider the following:
					</p>
					<pre class="prettyprint">struct admin {
  field email email unique;
  field private int comment
    "Some sort of private data.";
  field id int rowid;
  insert;
};

struct user {
  field admin struct adminid;
  field adminid:admin.id int comment 
    "Administrator of this user.";
  field id int rowid;
  insert;
  search id;
};</pre>
					<p>
						If we have two roles, <code class="prettyprint">admin</code> and <code
							class="prettyprint">user</code>, we can disallow the user from operating on the administrative table.
						But they can still see the data if we query for the user, as it will be pulled into the exported data.
						Some of those fields might not be appropriate for users to see.
					</p>
					<p>
						The problem is usage: there are generally more fields than operations, so it might be a burden
						to maintain role lists for fields.
						One solution is to make default-allow, but it still needs consideration.
					</p>
					<p>
						Another (easier) improvement is to add some syntactic sugar to the role assignments.
						Right now one can specify <code class="prettyprint">all</code> to signify all operations:
					</p>
					<pre class="prettyprint">struct admin {
  roles all { all; };
};</pre>
					<p>
						However, often I want to assign given <i>types</i> of operations to a given user&#8212;update, or delete, or searching.
						It might be helpful to allow, for example, <code class="prettyprint">search all</code> to stipulate all search functions.
					</p>
					<h3>
						acknowledgements
					</h3>
					<p>
						I'd like to thank CAPEM Solutions, Inc., for funding this development and agreeing that it bests
						serves the community as open source.
						Also, thanks to Michael Dexter for his copy-editing.
					</p>
				</section>
			</article>
			<footer>
				<div>
					<a href="https://creativecommons.org/licenses/by/4.0/"><i class="fa fa-creative-commons"></i></a> 
					<a rel="author" href="https://kristaps.bsd.lv">Kristaps Dzonsons</a>
				</div>
			</footer>
		</section>
	</body>
</html>

